(()=>{"use strict";var t={750:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GestureDecoder=void 0,e.GestureDecoder=class{constructor(t){this.cache=[],this.x=0,this.y=0,this.delta=0,t.addEventListener("pointerdown",this.handlePointerDown.bind(this)),t.addEventListener("pointermove",this.handlePointerMove.bind(this)),t.addEventListener("pointerup",this.handlePointerUp.bind(this)),t.addEventListener("pointercancel",this.handlePointerUp.bind(this)),t.addEventListener("pointerout",this.handlePointerUp.bind(this)),t.addEventListener("pointerleave",this.handlePointerUp.bind(this))}on(t,e){switch(t){case"dragstart":this.dragStartHandler=e;break;case"dragupdate":this.dragUpdateHandler=e;break;case"dragstop":this.dragStopHandler=e;break;case"zoomstart":this.zoomStartHandler=e;break;case"zoomupdate":this.zoomUpdateHandler=e;break;case"zoomstop":this.zoomStopHandler=e}}handlePointerDown(t){switch(this.cache.push(t),this.cache.length){case 1:this.startDrag();break;case 2:this.stopDrag(),this.startZoom();break;case 3:this.stopZoom()}}handlePointerMove(t){for(var e=0;e<this.cache.length;++e)if(this.cache[e].pointerId==t.pointerId){this.cache[e]=t;break}switch(this.cache.length){case 1:this.updateDrag();break;case 2:this.updateZoom()}}handlePointerUp(t){let e=!1;switch(this.cache.length){case 1:this.stopDrag();break;case 2:this.stopZoom(),e=!0;break;case 3:this.startZoom()}for(var i=0;i<this.cache.length;++i)if(this.cache[i].pointerId==t.pointerId){this.cache.splice(i,1);break}e&&this.startDrag()}startDrag(){this.x=this.cache[0].clientX,this.y=this.cache[0].clientY,null!=this.dragStartHandler&&this.dragStartHandler({x:this.cache[0].clientX-this.x,y:this.cache[0].clientY-this.y})}updateDrag(){null!=this.dragUpdateHandler&&this.dragUpdateHandler({x:this.cache[0].clientX-this.x,y:this.cache[0].clientY-this.y})}stopDrag(){null!=this.dragStopHandler&&this.dragStopHandler({x:this.cache[0].clientX-this.x,y:this.cache[0].clientY-this.y})}startZoom(){let t=this.cache[0].clientX-this.cache[1].clientX,e=this.cache[0].clientY-this.cache[1].clientY;if(this.delta=Math.sqrt(t*t+e*e),null!=this.zoomStartHandler){let t=(this.cache[0].clientX+this.cache[1].clientX)/2,e=(this.cache[0].clientY+this.cache[1].clientY)/2;this.zoomStartHandler({x:t,y:e,scale:1})}}updateZoom(){if(null!=this.zoomUpdateHandler){let t=(this.cache[0].clientX+this.cache[1].clientX)/2,e=(this.cache[0].clientY+this.cache[1].clientY)/2,i=this.cache[0].clientX-this.cache[1].clientX,r=this.cache[0].clientY-this.cache[1].clientY,s=Math.sqrt(i*i+r*r);this.zoomUpdateHandler({x:t,y:e,scale:s/this.delta})}}stopZoom(){if(null!=this.zoomStopHandler){let t=(this.cache[0].clientX+this.cache[1].clientX)/2,e=(this.cache[0].clientY+this.cache[1].clientY)/2,i=this.cache[0].clientX-this.cache[1].clientX,r=this.cache[0].clientY-this.cache[1].clientY,s=Math.sqrt(i*i+r*r);this.zoomStopHandler({x:t,y:e,scale:s/this.delta})}}}},940:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e,r){this.width=i.DEFAULT_WIDTH,this.margin=i.DEFAULT_MARGIN,this.menu=t,this.button=e,null!=r&&(this.width=r.width||i.DEFAULT_WIDTH,this.margin=r.margin||i.DEFAULT_MARGIN),this.button.addEventListener("click",this.toggle.bind(this))}open(){this.menu.style.width=`${this.width}pt`,this.button.style.marginRight=`${this.width+this.margin}pt`}close(){this.menu.style.width="0",this.button.style.marginRight=`${this.margin}pt`}toggle(){this.menu.style.width===`${this.width}pt`?this.close():this.open()}}e.default=i,i.DEFAULT_WIDTH=300,i.DEFAULT_MARGIN=20},709:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ATTRIB_NAME_VERTEX_POSITION=e.setupScreenRenderer=void 0,e.setupScreenRenderer=function(t,s){const h=function(t,e){const r=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))return console.error("Failed to compile vertex shader:\n"+t.getShaderInfoLog(r)),void t.deleteShader(r);const s=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(s,e),t.compileShader(s),!t.getShaderParameter(s,t.COMPILE_STATUS))return console.error("Failed to compile fragment shader:\n"+t.getShaderInfoLog(s)),t.deleteShader(r),void t.deleteShader(s);const h=t.createProgram();return t.attachShader(h,r),t.attachShader(h,s),t.linkProgram(h),t.getProgramParameter(h,t.LINK_STATUS)?(t.deleteShader(r),t.deleteShader(s),h):(console.error("Failed to link shader program:\n"+t.getProgramInfoLog(h)),t.deleteShader(r),t.deleteShader(s),void t.deleteProgram(h))}(t,s);if(null!=h)return function(t,i){const s=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,s),t.bufferData(t.ARRAY_BUFFER,r,t.STATIC_DRAW);const h=t.getAttribLocation(i,e.ATTRIB_NAME_VERTEX_POSITION);t.vertexAttribPointer(h,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(h)}(t,h),h},e.ATTRIB_NAME_VERTEX_POSITION="aPos";const i=`attribute lowp vec2 ${e.ATTRIB_NAME_VERTEX_POSITION};void main(){gl_Position=vec4(${e.ATTRIB_NAME_VERTEX_POSITION},0,1);}`,r=new Float32Array([1,1,-1,1,1,-1,-1,-1])},454:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Viewer=void 0;const r=i(709);class s{constructor(t,e,i){this.gl=t,this.program=e,this.uniforms=i}set(t,e,i,r,s){this.gl.useProgram(this.program),null!=i?null!=r?null!=s?this.gl.uniform4f(this.uniforms[t],e,i,r,s):this.gl.uniform3f(this.uniforms[t],e,i,r):this.gl.uniform2f(this.uniforms[t],e,i):this.gl.uniform1f(this.uniforms[t],e)}seti(t,e,i,r,s){this.gl.useProgram(this.program),null!=i?null!=r?null!=s?this.gl.uniform4i(this.uniforms[t],e,i,r,s):this.gl.uniform3i(this.uniforms[t],e,i,r):this.gl.uniform2i(this.uniforms[t],e,i):this.gl.uniform1i(this.uniforms[t],e)}draw(){this.gl.useProgram(this.program),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4)}requestDraw(){requestAnimationFrame((()=>this.draw()))}}e.Viewer=s,e.default=function(t,e,i){const h=t.getContext("webgl");if(null==h)return void console.error("Failed to get a WebGL context!");const n=r.setupScreenRenderer(h,e);if(null==n)return void console.error("Failed to setup screen renderer!");let a={};for(const t in i){const e=h.getUniformLocation(n,t);if(null==e)return console.error(`Failed to find "${t}" uniform in the supplied shader!`),void h.deleteProgram(n);a[t]=e}return new s(h,n,a)}}},e={};function i(r){var s=e[r];if(void 0!==s)return s.exports;var h=e[r]={exports:{}};return t[r](h,h.exports,i),h.exports}(()=>{const t=i(750),e=i(940),r=i(454);fetch("shaders/mandel.fs").then((t=>t.text())).then((e=>function(e){let i=document.getElementById("canvas");i.width=window.innerWidth,i.height=window.innerHeight;let s=r.default(i,e,{uRes:null,uRect:null,uLimit:null,uLimitColor:null});if(null==s)return void alert("Failed to setup WebGL :(");const h=document.getElementById("limit"),n=i.width/i.height;let a=new DOMRect(-1*n,-1,2*n,2);s.set("uRes",i.width,i.height),s.set("uRect",a.x,a.y,a.width,a.height),s.seti("uLimit",Number(h.value)),s.set("uLimitColor",0,0,0,1),s.requestDraw(),window.addEventListener("resize",(()=>{if(i.width=window.innerWidth,i.height=window.innerHeight,null!=s){const t=i.width/i.height;a.x=-1*t,a.y=-1,a.width=2*t,a.height=2,s.set("uRes",i.width,i.height),s.set("uRect",a.x,a.y,a.width,a.height),s.requestDraw()}})),h.addEventListener("input",(()=>{s.seti("uLimit",Number(h.value)),s.requestDraw()}));const o=(t,e,r)=>{const h=t/i.width,n=1-e/i.height;a.x+=a.width*h*(r-1),a.y+=a.height*n*(r-1),a.width/=r,a.height/=r,s.set("uRect",a.x,a.y,a.width,a.height),s.requestDraw()};let c=new t.GestureDecoder(i),l=0,d=0;const u=t=>{const e=t.x-l,r=t.y-d;0==e&&0==r||((t,e)=>{a.x-=t/i.width*a.width,a.y+=e/i.height*a.height,s.set("uRect",a.x,a.y,a.width,a.height),s.requestDraw()})(e,r),l=t.x,d=t.y};let g=1;const m=t=>{if(u(t),g!=t.scale){const e=t.scale/g;o(t.x,t.y,e)}g=t.scale};return c.on("dragstart",(({x:t,y:e})=>{l=t,d=e})),c.on("dragupdate",u),c.on("dragstop",u),c.on("zoomstart",(({x:t,y:e,scale:i})=>{l=t,d=e,g=i})),c.on("zoomupdate",m),c.on("zoomstop",m),i.addEventListener("wheel",(({x:t,y:e,deltaY:i})=>{o(t,e,1+-.001*i)})),s}(e))),window.onload=()=>{new e.default(document.getElementById("side-menu"),document.getElementById("toggle-menu"))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,