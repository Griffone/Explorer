(()=>{"use strict";const t=1/6;class i{constructor(t,i){this.re=0,this.im=0,this.re=t,this.im=i}add(t){return this.re+=t.re,this.im+=t.im,this}sqr(){let t=this.re,i=this.im;return this.re=t*t-i*i,this.im=2*t*i,this}mag2(){return this.re*this.re+this.im*this.im}}function r(t,r){let e=new i(t.re,t.im);var s=0;for(s=0;s<r;++s){if(t.mag2()>4)return[s,t];t.sqr().add(e)}return[s,t]}function e(i,r){return i===r?[0,0,0]:(e=i/r)<t?[255,e/t*255,0]:e<2*t?[255*(2-e/t),255,0]:e<.5?[0,255,(e-2*t)/t*255]:e<4*t?[0,255*(2-(e-2*t)/t),255]:e<5*t?[(e-4*t)/t*255,0,255]:[255,0,255*(2-(e-4*t)/t)];var e}onmessage=function(t){!function(t,s,h){let a=t.data;var n=0,m=0,d=0,o=[0,0,0],u=0,c=0;for(new i(0,0),c=0;c<t.height;++c)for(d=s.y+s.height*c/t.height,u=0;u<t.width;++u)m=s.x+s.width*u/t.width,o=e(r(new i(m,d),h)[0],h),a[n++]=o[0],a[n++]=o[1],a[n++]=o[2],a[n++]=255}(t.data.image,t.data.rect,t.data.limit),postMessage(t.data)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,