(()=>{"use strict";const t=1/6;class i{constructor(t,i){this.re=0,this.im=0,this.re=t,this.im=i}add(t){return this.re+=t.re,this.im+=t.im,this}sqr(){let t=this.re,i=this.im;return this.re=t*t-i*i,this.im=2*t*i,this}mag2(){return this.re*this.re+this.im*this.im}}function e(t,e){let r=new i(t.re,t.im);var a=0;for(a=0;a<e;++a){if(t.mag2()>4)return[a,t];t.sqr().add(r)}return[a,t]}function r(i,e){return i===e?[0,0,0]:(r=i/e)<t?[255,r/t*255,0]:r<2*t?[255*(2-r/t),255,0]:r<.5?[0,255,(r-2*t)/t*255]:r<4*t?[0,255*(2-(r-2*t)/t),255]:r<5*t?[(r-4*t)/t*255,0,255]:[255,0,255*(2-(r-4*t)/t)];var r}onmessage=t=>{!function(t,a,s){let h=t.data;var n=0,d=0,m=0,o=[0,0,0],u=0,c=0;for(new i(0,0),c=0;c<t.height;++c)for(m=a.y+a.height*c/t.height,u=0;u<t.width;++u)d=a.x+a.width*u/t.width,o=r(e(new i(d,m),s)[0],s),h[n++]=o[0],h[n++]=o[1],h[n++]=o[2],h[n++]=255}(new ImageData(new Uint8ClampedArray(t.data.pixels),t.data.width,t.data.height),t.data.rect,t.data.limit),postMessage(t.data,[t.data.pixels])}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWNobm9tdW5rLmdpdGh1Yi5pby8uL3NyYy9kcmF3X3dvcmtlci50cyJdLCJuYW1lcyI6WyJTSVhUSCIsIkNvbXBsZXgiLCJyZWFsIiwiaW1hZ2luYXJ5IiwicmUiLCJpbSIsInRoaXMiLCJvdGhlciIsIm1hbmRlbGJyb3QiLCJwb2ludCIsImxpbWl0IiwiYyIsImkiLCJtYWcyIiwic3FyIiwiYWRkIiwibWFwQ29sb3IiLCJpdGVyYXRpb25Db3VudCIsImh1ZSIsIm9ubWVzc2FnZSIsIm1zZyIsImltYWdlIiwicmVjdCIsInBpeGVscyIsImRhdGEiLCJvZmZzZXQiLCJ4Q29vcmQiLCJ5Q29vcmQiLCJwaXhlbCIsIngiLCJ5IiwiaGVpZ2h0Iiwid2lkdGgiLCJkcmF3IiwiSW1hZ2VEYXRhIiwiVWludDhDbGFtcGVkQXJyYXkiLCJwb3N0TWVzc2FnZSJdLCJtYXBwaW5ncyI6Im1CQUVBLE1BQU1BLEVBQVEsRUFBSSxFQUtsQixNQUFNQyxFQVFMLFlBQVlDLEVBQWNDLEdBUDFCLEtBQUFDLEdBQUssRUFDTCxLQUFBQyxHQUFLLEVBT0pDLEtBQUtGLEdBQUtGLEVBQ1ZJLEtBQUtELEdBQUtGLEVBT1gsSUFBSUksR0FHSCxPQUZBRCxLQUFLRixJQUFNRyxFQUFNSCxHQUNqQkUsS0FBS0QsSUFBTUUsRUFBTUYsR0FDVkMsS0FNUixNQUNDLElBQUlGLEVBQUtFLEtBQUtGLEdBQ1ZDLEVBQUtDLEtBQUtELEdBR2QsT0FGQUMsS0FBS0YsR0FBS0EsRUFBR0EsRUFBS0MsRUFBR0EsRUFDckJDLEtBQUtELEdBQUssRUFBRUQsRUFBR0MsRUFDUkMsS0FNUixPQUNDLE9BQU9BLEtBQUtGLEdBQUdFLEtBQUtGLEdBQUtFLEtBQUtELEdBQUdDLEtBQUtELElBWXhDLFNBQVNHLEVBQVdDLEVBQWdCQyxHQUNuQyxJQUFJQyxFQUFJLElBQUlWLEVBQVFRLEVBQU1MLEdBQUlLLEVBQU1KLElBQ3BDLElBQUlPLEVBQUksRUFDUixJQUFLQSxFQUFJLEVBQUdBLEVBQUlGLElBQVNFLEVBQUcsQ0FDM0IsR0FBSUgsRUFBTUksT0FBUyxFQUNsQixNQUFPLENBQUVELEVBQUdILEdBRWJBLEVBQU1LLE1BQU1DLElBQUlKLEdBRWpCLE1BQU8sQ0FBRUMsRUFBR0gsR0E2QmIsU0FBU08sRUFBU0MsRUFBd0JQLEdBQ3pDLE9BQUlPLElBQW1CUCxFQUNmLENBQUUsRUFBRyxFQUFHLElBdkJDUSxFQXlCREQsRUFBaUJQLEdBeEJ2QlYsRUFDRixDQUFFLElBQUtrQixFQUFNbEIsRUFBUSxJQUFLLEdBQ3ZCa0IsRUFBTSxFQUFFbEIsRUFDWCxDQUFvQixLQUFqQixFQUFJa0IsRUFBSWxCLEdBQWMsSUFBSyxHQUMzQmtCLEVBQU0sR0FDVCxDQUFFLEVBQUcsS0FBTUEsRUFBTSxFQUFFbEIsR0FBU0EsRUFBUSxLQUNqQ2tCLEVBQU0sRUFBRWxCLEVBQ1gsQ0FBRSxFQUFtQyxLQUEvQixHQUFLa0IsRUFBTSxFQUFFbEIsR0FBU0EsR0FBYyxLQUN2Q2tCLEVBQU0sRUFBRWxCLEVBQ1gsRUFBR2tCLEVBQU0sRUFBRWxCLEdBQVNBLEVBQVEsSUFBSyxFQUFHLEtBRXBDLENBQUUsSUFBSyxFQUFpQyxLQUE3QixHQUFLa0IsRUFBTSxFQUFFbEIsR0FBT0EsSUFaeEMsSUFBa0JrQixFQTJEbEJDLFVBQWFDLEtBekJiLFNBQWNDLEVBQWtCQyxFQUFlWixHQUM5QyxJQUFJYSxFQUFTRixFQUFNRyxLQUVuQixJQUFJQyxFQUFTLEVBQ1pDLEVBQVMsRUFDVEMsRUFBUyxFQUNUQyxFQUFrQyxDQUFDLEVBQUcsRUFBRyxHQUN6Q0MsRUFBSSxFQUNKQyxFQUFJLEVBR0wsSUFGaUMsSUFBSTdCLEVBQVEsRUFBRyxHQUUzQzZCLEVBQUksRUFBR0EsRUFBSVQsRUFBTVUsU0FBVUQsRUFFL0IsSUFEQUgsRUFBU0wsRUFBS1EsRUFBSVIsRUFBS1MsT0FBU0QsRUFBSVQsRUFBTVUsT0FDckNGLEVBQUksRUFBR0EsRUFBSVIsRUFBTVcsUUFBU0gsRUFDOUJILEVBQVNKLEVBQUtPLEVBQUlQLEVBQUtVLE1BQVFILEVBQUlSLEVBQU1XLE1BRXpDSixFQUFRWixFQURDUixFQUFXLElBQUlQLEVBQVF5QixFQUFRQyxHQUFTakIsR0FDekIsR0FBSUEsR0FDNUJhLEVBQU9FLEtBQVlHLEVBQU0sR0FDekJMLEVBQU9FLEtBQVlHLEVBQU0sR0FDekJMLEVBQU9FLEtBQVlHLEVBQU0sR0FDekJMLEVBQU9FLEtBQVksSUFVckJRLENBSlksSUFBSUMsVUFDZixJQUFJQyxrQkFBa0JmLEVBQUlJLEtBQUtELFFBQy9CSCxFQUFJSSxLQUFLUSxNQUNUWixFQUFJSSxLQUFLTyxRQUNFWCxFQUFJSSxLQUFLRixLQUFNRixFQUFJSSxLQUFLZCxPQUNwQzBCLFlBQVloQixFQUFJSSxLQUFNLENBQUNKLEVBQUlJLEtBQUtELFciLCJmaWxlIjoiZHJhd193b3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb25zdGFudHNcclxuXHJcbmNvbnN0IFNJWFRIID0gMSAvIDY7XHJcblxyXG4vLyBDbGFzcyBkZWNsYXJhdGlvbnNcclxuXHJcbi8qKiBBIGNvbXBsZXggbnVtYmVyLiAqL1xyXG5jbGFzcyBDb21wbGV4IHtcclxuXHRyZSA9IDA7XHJcblx0aW0gPSAwO1xyXG5cdFxyXG5cdC8qKiBDcmVhdGUgYSBuZXcgY29tcGxleCBudW1iZXIuXHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IHJlYWwgUmVhbCBwYXJ0LlxyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbWFnaW5hcnkgSW1hZ2luYXJ5IChtdWx0aXBsaWVkIGJ5IHNxcnQoLTEpKSBwYXJ0LlxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHJlYWw6IG51bWJlciwgaW1hZ2luYXJ5OiBudW1iZXIpIHtcclxuXHRcdHRoaXMucmUgPSByZWFsO1xyXG5cdFx0dGhpcy5pbSA9IGltYWdpbmFyeTtcclxuXHR9XHJcblxyXG5cdC8qKiBBZGQgYW5vdGhlciBjb21wbGV4IG51bWJlci5cclxuXHQgKiBAcGFyYW0ge0NvbXBsZXh9IG90aGVyIFRoZSBvdGhlciBjb21wbGV4IG51bWJlciB0byBhZGQuXHJcblx0ICogQHJldHVybnMge3RoaXN9IFNlbGYuXHJcblx0ICovXHJcblx0YWRkKG90aGVyOiBDb21wbGV4KTogdGhpcyB7XHJcblx0XHR0aGlzLnJlICs9IG90aGVyLnJlO1xyXG5cdFx0dGhpcy5pbSArPSBvdGhlci5pbTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqIE11bHRpcGx5IHdpdGggaXRzZWxmLlxyXG5cdCAqIEByZXR1cm5zIHt0aGlzfSBTZWxmLlxyXG5cdCAqL1xyXG5cdHNxcigpOiB0aGlzIHtcclxuXHRcdGxldCByZSA9IHRoaXMucmU7XHJcblx0XHRsZXQgaW0gPSB0aGlzLmltO1xyXG5cdFx0dGhpcy5yZSA9IHJlKnJlIC0gaW0qaW07XHJcblx0XHR0aGlzLmltID0gMipyZSppbTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqIEdldCB0aGUgbWFnbml0dWRlIG9mIHRoZSBjb21wbGV4IG51bWJlci5cclxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbWFnbml0dWRlIG9mIHRoZSBudW1iZXIuXHJcblx0ICovXHJcblx0bWFnMigpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXMucmUqdGhpcy5yZSArIHRoaXMuaW0qdGhpcy5pbTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIEZyZWUgZnVuY3Rpb24gZGVjbGFyYXRpb25zXHJcblxyXG4vKiogQ2hlY2sgd2hldGhlciB0aGUgcHJvdmlkZWQgcG9pbnQgaXMgd2l0aGluIHRoZSBNYW5kZWxicm90IHNldC5cclxuICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01hbmRlbGJyb3Rfc2V0IGZvciBtb3JlIGRldGFpbHMuXHJcbiAqIEBwYXJhbSB7Q29tcGxleH0gcG9pbnQgVGhlIGNvbXBsZXggbnVtYmVyIHRvIGNoZWNrLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgTWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBjaGVjayB3aGV0aGVyIHRoZSBudW1iZXIgaXMgd2l0aGluIHRoZSBNYW5kZWxicm90IHNldC5cclxuICogQHJldHVybnMge1tudW1iZXIsIENvbXBsZXhdfSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGUgbnVtYmVyIHBhc3NlZCBhbmQgdGhlIGxhc3QgY2hlY2tlZCB2YWx1ZS5cclxuICovXHJcbmZ1bmN0aW9uIG1hbmRlbGJyb3QocG9pbnQ6IENvbXBsZXgsIGxpbWl0OiBudW1iZXIpOiBbbnVtYmVyLCBDb21wbGV4XSB7XHJcblx0bGV0IGMgPSBuZXcgQ29tcGxleChwb2ludC5yZSwgcG9pbnQuaW0pO1xyXG5cdHZhciBpID0gMDtcclxuXHRmb3IgKGkgPSAwOyBpIDwgbGltaXQ7ICsraSkge1xyXG5cdFx0aWYgKHBvaW50Lm1hZzIoKSA+IDQpIHtcclxuXHRcdFx0cmV0dXJuIFsgaSwgcG9pbnQsIF07XHJcblx0XHR9XHJcblx0XHRwb2ludC5zcXIoKS5hZGQoYyk7XHJcblx0fVxyXG5cdHJldHVybiBbIGksIHBvaW50LCBdO1xyXG59XHJcblxyXG4vKiogVHJhbnNsYXRlIGEgaHVlIHZhbHVlIHRvIGEgZnVsbHkgc2F0dXJhdGVkIFJHQiB2YWx1ZSB1c2luZ1xyXG4gKiBodHRwczovL3d3dy5yYXBpZHRhYmxlcy5jb20vY29udmVydC9jb2xvci9oc3YtdG8tcmdiLmh0bWxcclxuICogQHBhcmFtIHtudW1iZXJ9IGh1ZSBOb3JtYWxpemVkIGh1ZSBvZiBIU1YgY29sb3IuXHJcbiAqIEByZXR1cm5zIHtbbnVtYmVyLCBudW1iZXIsIG51bWJlcl19IFtyZWQsIGdyZWVuLCBibHVlXSBjb2xvci5cclxuICovXHJcbmZ1bmN0aW9uIGh1ZVRvUmdiKGh1ZTogbnVtYmVyKTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcclxuXHRpZiAoaHVlIDwgU0lYVEgpIHtcclxuXHRcdHJldHVybiBbIDI1NSwgaHVlIC8gU0lYVEggKiAyNTUsIDAsIF07XHJcblx0fSBlbHNlIGlmIChodWUgPCAyKlNJWFRIKSB7XHJcblx0XHRyZXR1cm4gWyAoMiAtIGh1ZS9TSVhUSCkgKiAyNTUsIDI1NSwgMCwgXTtcclxuXHR9IGVsc2UgaWYgKGh1ZSA8IDMqU0lYVEgpIHtcclxuXHRcdHJldHVybiBbIDAsIDI1NSwgKGh1ZSAtIDIqU0lYVEgpIC8gU0lYVEggKiAyNTUsIF07XHJcblx0fSBlbHNlIGlmIChodWUgPCA0KlNJWFRIKSB7XHJcblx0XHRyZXR1cm4gWyAwLCAoMiAtIChodWUgLSAyKlNJWFRIKSAvIFNJWFRIKSAqIDI1NSwgMjU1LCBdO1xyXG5cdH0gZWxzZSBpZiAoaHVlIDwgNSpTSVhUSCkge1xyXG5cdFx0cmV0dXJuIFsgKGh1ZSAtIDQqU0lYVEgpIC8gU0lYVEggKiAyNTUsIDAsIDI1NSwgXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIFsgMjU1LCAwLCAoMiAtIChodWUgLSA0KlNJWFRIKS9TSVhUSCkgKiAyNTUsIF07XHJcblx0fVxyXG59XHJcblxyXG4vKiogTWFwIGl0ZXJhdGlvbiBjb3VudCB0byBhbiBSR0IgdmFsdWUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpdGVyYXRpb25Db3VudCBUaGUgbnVtYmVyIG9mIHBlcmZvcm1lZCBpdGVyYXRpb25zIGZvciB0aGUgcGl4ZWwuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLlxyXG4gKiBAcmV0dXJucyB7W251bWJlciwgbnVtYmVyLCBudW1iZXJdfSBSR0IgdmFsdWVzIG9mIHRoZSBtYXBwZWQgY29sb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBtYXBDb2xvcihpdGVyYXRpb25Db3VudDogbnVtYmVyLCBsaW1pdDogbnVtYmVyKTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcclxuXHRpZiAoaXRlcmF0aW9uQ291bnQgPT09IGxpbWl0KSB7XHJcblx0XHRyZXR1cm4gWyAwLCAwLCAwLCBdO1xyXG5cdH1cclxuXHRyZXR1cm4gaHVlVG9SZ2IoaXRlcmF0aW9uQ291bnQgLyBsaW1pdCk7XHJcbn1cclxuXHJcbi8qKiBEcmF3IHBhcnQgb2YgdGhlIG1hbmRlbGJyb3Qgc2V0IGFzIHByb3ZpZGVkIGJ5IHRoZSB0aGluZy5cclxuICogUG9zdHMgYSBtZXNzYWdlIHdpdGggdGhlIGltYWdlIGFuZCB0aGUgcHJvdmlkZWQgcmVjdGFuZ2xlIGJhY2sgd2hlbiBkb25lLlxyXG4gKiBAcGFyYW0ge0ltYWdlRGF0YX0gaW1hZ2UgVGhlIGltYWdlIHRvIGRyYXcgdG8uXHJcbiAqIEBwYXJhbSB7RE9NUmVjdH0gcmVjdCBUaGUgcmVjdGFuZ2xlIHRvIGRyYXcuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLlxyXG4gKi9cclxuZnVuY3Rpb24gZHJhdyhpbWFnZTogSW1hZ2VEYXRhLCByZWN0OiBET01SZWN0LCBsaW1pdDogbnVtYmVyKTogdm9pZCB7XHJcblx0bGV0IHBpeGVscyA9IGltYWdlLmRhdGE7XHJcblx0XHJcblx0dmFyIG9mZnNldCA9IDAsXHJcblx0XHR4Q29vcmQgPSAwLFxyXG5cdFx0eUNvb3JkID0gMCxcclxuXHRcdHBpeGVsOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMCwgMCwgMF0sXHJcblx0XHR4ID0gMCxcclxuXHRcdHkgPSAwLFxyXG5cdFx0cmVzdWx0OiBbbnVtYmVyLCBDb21wbGV4XSA9IFswLCBuZXcgQ29tcGxleCgwLCAwKV07XHJcblxyXG5cdGZvciAoeSA9IDA7IHkgPCBpbWFnZS5oZWlnaHQ7ICsreSkge1xyXG5cdFx0eUNvb3JkID0gcmVjdC55ICsgcmVjdC5oZWlnaHQgKiB5IC8gaW1hZ2UuaGVpZ2h0O1xyXG5cdFx0Zm9yICh4ID0gMDsgeCA8IGltYWdlLndpZHRoOyArK3gpIHtcclxuXHRcdFx0eENvb3JkID0gcmVjdC54ICsgcmVjdC53aWR0aCAqIHggLyBpbWFnZS53aWR0aDtcclxuXHRcdFx0cmVzdWx0ID0gbWFuZGVsYnJvdChuZXcgQ29tcGxleCh4Q29vcmQsIHlDb29yZCksIGxpbWl0KTtcclxuXHRcdFx0cGl4ZWwgPSBtYXBDb2xvcihyZXN1bHRbMF0sIGxpbWl0KTtcclxuXHRcdFx0cGl4ZWxzW29mZnNldCsrXSA9IHBpeGVsWzBdOyAvLyByZWRcclxuXHRcdFx0cGl4ZWxzW29mZnNldCsrXSA9IHBpeGVsWzFdOyAvLyBncmVlblxyXG5cdFx0XHRwaXhlbHNbb2Zmc2V0KytdID0gcGl4ZWxbMl07IC8vIGJsdWVcclxuXHRcdFx0cGl4ZWxzW29mZnNldCsrXSA9IDI1NTsgLy8gYWxwaGFcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbm9ubWVzc2FnZSA9IChtc2c6IE1lc3NhZ2VFdmVudDxEcmF3UmVnaW9uTWVzc2FnZT4pID0+IHtcclxuXHRsZXQgaW1hZ2UgPSBuZXcgSW1hZ2VEYXRhKFxyXG5cdFx0bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG1zZy5kYXRhLnBpeGVscyksXHJcblx0XHRtc2cuZGF0YS53aWR0aCxcclxuXHRcdG1zZy5kYXRhLmhlaWdodCk7XHJcblx0ZHJhdyhpbWFnZSwgbXNnLmRhdGEucmVjdCwgbXNnLmRhdGEubGltaXQpO1xyXG5cdHBvc3RNZXNzYWdlKG1zZy5kYXRhLCBbbXNnLmRhdGEucGl4ZWxzXSk7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=