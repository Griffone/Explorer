(()=>{"use strict";var t={447:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ProceduralImageView=void 0;const i=new Uint8ClampedArray;e.ProceduralImageView=class{constructor(t,e,i,h=64,s=64){if(this.canvas=t,this.context=t.getContext("2d"),this.chunkWidth=h,this.chunkHeight=s,void 0===e){let t=this.canvas.width/this.canvas.height;this.viewport=new DOMRect(-.8-1.1*t,-1.1,2.2*t,2.2)}else this.viewport=e;i=i||window.navigator.hardwareConcurrency,this.freeWorkers=[],this.work=[],this.limit=30,this.offsetX=0,this.offsetY=0,this.cleanRect=null;for(var a=0;a<i;++a){let t=new Worker("./scripts/draw_worker.js"),e=new Uint8ClampedArray(h*s*4);((t,e,i)=>{t.onmessage=i=>{let h=new Uint8ClampedArray(i.data.pixels);if(i.data.limit==e.limit&&i.data.viewport.width==e.viewport.width&&i.data.viewport.height==e.viewport.height){let t=new ImageData(h,i.data.width,i.data.height);e.context.putImageData(t,i.data.pixelX+e.offsetX-i.data.offsetX,i.data.pixelY+e.offsetY-i.data.offsetY)}let s=e.work.pop();null!=s?(s.pixels=h.buffer,t.postMessage(s,[s.pixels])):(e.freeWorkers.push([t,h]),e.cleanRect=e.viewport)}})(t,this),this.freeWorkers.push([t,e])}}update(t,e){this.limit==t&&null!=e||this.clearWork(),e=e||new DOMRect(0,0,this.canvas.width,this.canvas.height),this.limit=t;let h=e.width/this.chunkWidth,s=e.height/this.chunkHeight;null!=this.clearStyle&&(this.context.fillStyle=this.clearStyle);const a=this.chunkWidth/this.canvas.width*this.viewport.width,n=this.chunkHeight/this.canvas.height*this.viewport.height;for(var r=0;r<s;++r){const s=e.y+r*this.chunkHeight,c=this.viewport.y+(e.y+r*this.chunkHeight)/this.canvas.height*this.viewport.height;for(var o=0;o<h;++o){const h=e.x+o*this.chunkWidth,r=this.viewport.x+(e.x+o*this.chunkWidth)/this.canvas.width*this.viewport.width;this.queueWork({pixels:i,width:this.chunkWidth,height:this.chunkHeight,rect:new DOMRect(r,c,a,n),limit:t,pixelX:h,pixelY:s,viewport:DOMRect.fromRect(this.viewport),offsetX:this.offsetX,offsetY:this.offsetY})}}this.work.reverse()}reset(t){if(this.clearWork(),this.canvas.width>=this.canvas.height){let t=this.canvas.width/this.canvas.height;this.viewport=new DOMRect(-t,-1,2*t,2)}else{let t=this.canvas.height/this.canvas.height;this.viewport=new DOMRect(-1,-t,2,2*t)}this.update(t)}pan(t,e){this.clearWork();let i=t>=0?t:this.canvas.width+t,h=e>=0?e:this.canvas.height+e,s=[];if(this.viewport.x-=t/this.canvas.width*this.viewport.width,this.viewport.y-=e/this.canvas.height*this.viewport.height,this.offsetX+=t,this.offsetY+=e,s=[new DOMRect(0,0,i,h),new DOMRect(i,0,this.canvas.width-i,h),new DOMRect(0,h,i,this.canvas.height-h),new DOMRect(i,h,this.canvas.width-i,this.canvas.height-h)],t<0&&e<0){let i=this.context.getImageData(-t,-e,s[0].width,s[0].height);this.context.putImageData(i,0,0)}else if(t>=0&&e<0){let i=this.context.getImageData(0,-e,s[1].width,s[1].height);this.context.putImageData(i,t,0)}else if(t<0&&e>=0){let i=this.context.getImageData(-t,0,s[2].width,s[2].height);this.context.putImageData(i,0,e)}else if(t>=0&&e>=0){let i=this.context.getImageData(0,0,s[3].width,s[3].height);this.context.putImageData(i,t,e)}this.update(this.limit)}zoom(t,e,i){this.clearWork();let h=t/this.canvas.width,s=e/this.canvas.height,a=this.viewport.x+this.viewport.width*h,n=this.viewport.y+this.viewport.height*s;if(this.viewport.width*=i,this.viewport.height*=i,this.viewport.x=a-this.viewport.width*h,this.viewport.y=n-this.viewport.height*s,i>1){let t=1/i;this.context.drawImage(this.canvas,this.canvas.width*h-this.canvas.width*h*t,this.canvas.height*s-this.canvas.height*s*t,this.canvas.width*t,this.canvas.height*t)}else this.context.drawImage(this.canvas,this.canvas.width*h-this.canvas.width*h*i,this.canvas.height*s-this.canvas.height*s*i,this.canvas.width*i,this.canvas.height*i,0,0,this.canvas.width,this.canvas.height);this.update(this.limit)}resize(t,e){this.clearWork(),this.viewport.width*=t/this.canvas.width,this.viewport.height*=e/this.canvas.height,this.canvas.width=t,this.canvas.height=e,this.update(this.limit)}clearWork(){this.work.length=0}queueWork(t){let e=this.freeWorkers.pop();null!=e?(t.pixels=e[1].buffer,e[0].postMessage(t,[t.pixels])):this.work.push(t)}}},235:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.view=void 0;const h=i(447);let s=document.getElementById("coord-x"),a=document.getElementById("coord-y"),n=0,r=0,o=!1;function c(t,e){s.textContent=`X: ${t.toExponential(3)}`,a.textContent=`Y: ${e.toExponential(3)}`}let d=document.getElementById("canvas");d.width=window.innerWidth,d.height=window.innerHeight;let l=new h.ProceduralImageView(d);e.view=l,window.addEventListener("resize",(()=>l.resize(window.innerWidth,window.innerHeight))),d.addEventListener("pointerdown",(t=>{o=!0,n=t.clientX,r=t.clientY})),d.addEventListener("pointermove",(t=>{o&&(l.pan(Math.round(t.clientX-n),Math.round(t.clientY-r)),n=t.clientX,r=t.clientY)})),d.addEventListener("pointerup",(()=>o=!1)),d.addEventListener("pointerleave",(()=>o=!1)),d.addEventListener("pointercancel",(()=>o=!1)),d.addEventListener("wheel",(t=>{l.zoom(t.clientX,t.clientY,1+.001*t.deltaY)})),d.addEventListener("gesturechange",(t=>{l.zoom(t.clientX,t.clientY,t.scale)})),d.addEventListener("gestureend",(t=>{l.zoom(t.clientX,t.clientY,t.scale)})),d.addEventListener("mousemove",(t=>{c(l.viewport.x+t.clientX/d.width*l.viewport.width,l.viewport.y+t.clientY/d.height*l.viewport.height)})),d.addEventListener("mouseleave",(()=>{c(l.viewport.x+.5*l.viewport.width,l.viewport.y+.5*l.viewport.height)})),l.resize(window.innerWidth,window.innerHeight),c(l.viewport.x+.5*l.viewport.width,l.viewport.y+.5*l.viewport.height)}},e={};function i(h){var s=e[h];if(void 0!==s)return s.exports;var a=e[h]={exports:{}};return t[h](a,a.exports,i),a.exports}(()=>{const t=i(235);let e=document.getElementById("limit"),h=Number(e.value);function s(e){e!==h&&(t.view.update(e),h=e)}e.addEventListener("input",(()=>{let t=Number(e.value),i=Number(e.min),h=Number(e.max);t<i?t=i:t>h&&(t=h),t>=i&&t<=h&&s(t)})),e.addEventListener("change",(()=>{let t=0,i=Number(e.min),h=Number(e.max);""===e.value&&(e.value="30"),t=Number(e.value),t<i?e.value=e.min:t>h&&(e.value=e.max),s(Number(e.value))}))})(),(()=>{const t=i(235);let e=document.getElementById("limit"),h=document.getElementById("side-menu"),s=document.getElementById("toggle-menu"),a=document.getElementById("toggle-menu-arrow");s.addEventListener("click",(function(){"240pt"===h.style.width?(h.style.width="0",s.style.marginRight="20pt",a.classList.remove("right"),a.classList.add("left")):(h.style.width="240pt",h.getBoundingClientRect().width,s.style.marginRight="260pt",a.classList.remove("left"),a.classList.add("right"))})),document.getElementById("redraw").onclick=()=>{t.view.update(Number(e.value))},document.getElementById("reset").onclick=()=>{t.view.reset(Number(e.value))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,