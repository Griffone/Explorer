(()=>{"use strict";var t={447:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ProceduralImageView=void 0,e.ProceduralImageView=class{constructor(t,e,i,h=64,s=64){if(this.canvas=t,this.context=t.getContext("2d"),this.chunkWidth=h,this.chunkHeight=s,void 0===e){let t=this.canvas.width/this.canvas.height;this.viewport=new DOMRect(-.8-1.1*t,-1.1,2.2*t,2.2)}else this.viewport=e;i=i||window.navigator.hardwareConcurrency,this.workers=[],this.nextWorkerIndex=0,this.limit=30,this.updateTimer=0,this.offsetX=0,this.offsetY=0;for(var a=0;a<i;++a)this.workers.push(new Worker("./scripts/draw_worker.js")),this.workers[a].onmessage=t=>{t.data.limit==this.limit&&t.data.viewport.width==this.viewport.width&&t.data.viewport.height==this.viewport.height&&this.context.putImageData(t.data.image,t.data.pixelX+this.offsetX-t.data.offsetX,t.data.pixelY+this.offsetY-t.data.offsetY)}}update(t,e){e=e||new DOMRect(0,0,this.canvas.width,this.canvas.height),this.limit=t;let i=e.width/this.chunkWidth,h=e.height/this.chunkHeight;null!=this.clearStyle&&(this.context.fillStyle=this.clearStyle);for(var s={image:void 0,rect:new DOMRect,limit:this.limit,viewport:this.viewport,offsetX:this.offsetX,offsetY:this.offsetY,pixelX:0,pixelY:0},a=0;a<h;++a){var n=Math.min(e.height-a*this.chunkHeight,this.chunkHeight);s.pixelY=e.y+a*this.chunkHeight,s.rect.y=this.viewport.y+(e.y+a*this.chunkHeight)/this.canvas.height*this.viewport.height,s.rect.height=n/this.canvas.height*this.viewport.height;for(var o=0;o<i;++o){var r=Math.min(e.width-o*this.chunkWidth,this.chunkWidth);s.pixelX=e.x+o*this.chunkWidth,s.rect.x=this.viewport.x+(e.x+o*this.chunkWidth)/this.canvas.width*this.viewport.width,s.rect.width=r/this.canvas.width*this.viewport.width,null!=s.image&&s.image.width==r&&s.image.height==n||(s.image=this.context.createImageData(r,n)),this.workers[this.nextWorkerIndex].postMessage(s),this.nextWorkerIndex=(this.nextWorkerIndex+1)%this.workers.length}}}reset(t){if(this.canvas.width>=this.canvas.height){let t=this.canvas.width/this.canvas.height;this.viewport=new DOMRect(-t,-1,2*t,2)}else{let t=this.canvas.height/this.canvas.height;this.viewport=new DOMRect(-1,-t,2,2*t)}this.update(t)}pan(t,e){let i=t>=0?t:this.canvas.width+t,h=e>=0?e:this.canvas.height+e,s=[];if(this.viewport.x-=t/this.canvas.width*this.viewport.width,this.viewport.y-=e/this.canvas.height*this.viewport.height,this.offsetX+=t,this.offsetY+=e,s=[new DOMRect(0,0,i,h),new DOMRect(i,0,this.canvas.width-i,h),new DOMRect(0,h,i,this.canvas.height-h),new DOMRect(i,h,this.canvas.width-i,this.canvas.height-h)],t<0&&e<0){let i=this.context.getImageData(-t,-e,s[0].width,s[0].height);this.context.putImageData(i,0,0),s.splice(0,1)}else if(t>=0&&e<0){let i=this.context.getImageData(0,-e,s[1].width,s[1].height);this.context.putImageData(i,t,0),s.splice(1,1)}else if(t<0&&e>=0){let i=this.context.getImageData(-t,0,s[2].width,s[2].height);this.context.putImageData(i,0,e),s.splice(2,1)}else if(t>=0&&e>=0){let i=this.context.getImageData(0,0,s[3].width,s[3].height);this.context.putImageData(i,t,e),s.splice(3,1)}s.forEach((t=>this.update(this.limit,t)))}zoom(t,e,i,h=0){let s=t/this.canvas.width,a=e/this.canvas.height,n=this.viewport.x+this.viewport.width*s,o=this.viewport.y+this.viewport.height*a;if(this.viewport.width*=i,this.viewport.height*=i,this.viewport.x=n-this.viewport.width*s,this.viewport.y=o-this.viewport.height*a,i>1){let t=1/i;this.context.drawImage(this.canvas,this.canvas.width*s-this.canvas.width*s*t,this.canvas.height*a-this.canvas.height*a*t,this.canvas.width*t,this.canvas.height*t)}else this.context.drawImage(this.canvas,this.canvas.width*s-this.canvas.width*s*i,this.canvas.height*a-this.canvas.height*a*i,this.canvas.width*i,this.canvas.height*i,0,0,this.canvas.width,this.canvas.height);window.clearTimeout(this.updateTimer),this.updateTimer=setTimeout(this.update.bind(this,this.limit),h)}resize(t,e){this.viewport.width*=t/this.canvas.width,this.viewport.height*=e/this.canvas.height,this.canvas.width=t,this.canvas.height=e,this.update(this.limit)}}},235:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.view=void 0;const h=i(447);let s=document.getElementById("coord-x"),a=document.getElementById("coord-y"),n=0,o=0,r=!1;function d(t,e){s.textContent=`X: ${t.toExponential(3)}`,a.textContent=`Y: ${e.toExponential(3)}`}let c=document.getElementById("canvas");c.width=window.innerWidth,c.height=window.innerHeight;let w=new h.ProceduralImageView(c,void 0,1,64,64);e.view=w,window.addEventListener("resize",(()=>w.resize(window.innerWidth,window.innerHeight))),c.addEventListener("pointerdown",(t=>{r=!0,n=t.clientX,o=t.clientY})),c.addEventListener("pointermove",(t=>{r&&(w.pan(Math.round(t.clientX-n),Math.round(t.clientY-o)),n=t.clientX,o=t.clientY)})),c.addEventListener("pointerup",(()=>r=!1)),c.addEventListener("pointerleave",(()=>r=!1)),c.addEventListener("pointercancel",(()=>r=!1)),c.addEventListener("wheel",(t=>{w.zoom(t.clientX,t.clientY,1+.001*t.deltaY,200)})),c.addEventListener("mousemove",(t=>{d(w.viewport.x+t.clientX/c.width*w.viewport.width,w.viewport.y+t.clientY/c.height*w.viewport.height)})),c.addEventListener("mouseleave",(()=>{d(w.viewport.x+.5*w.viewport.width,w.viewport.y+.5*w.viewport.height)})),w.resize(window.innerWidth,window.innerHeight),d(w.viewport.x+.5*w.viewport.width,w.viewport.y+.5*w.viewport.height)}},e={};function i(h){var s=e[h];if(void 0!==s)return s.exports;var a=e[h]={exports:{}};return t[h](a,a.exports,i),a.exports}(()=>{const t=i(235);let e=document.getElementById("limit"),h=0,s=Number(e.value);e.addEventListener("input",(()=>{let i=Number(e.value),a=Number(e.min),n=Number(e.max);i<a?i=a:i>n&&(i=n),i>=a&&i<=n&&function(e,i){clearTimeout(h),h=window.setTimeout((()=>{e!==s&&(t.view.update(e),s=e)}),600)}(i)})),e.addEventListener("change",(()=>{let i=0,a=Number(e.min),n=Number(e.max);""===e.value&&(e.value="30"),i=Number(e.value),i<a?e.value=e.min:i>n&&(e.value=e.max),function(e){clearTimeout(h),e!==s&&(t.view.update(e),s=e)}(Number(e.value))}))})(),(()=>{const t=i(235);let e=document.getElementById("limit"),h=document.getElementById("side-menu"),s=document.getElementById("toggle-menu"),a=document.getElementById("toggle-menu-arrow");s.addEventListener("click",(function(){"240pt"===h.style.width?(h.style.width="0",s.style.marginRight="20pt",a.classList.remove("right"),a.classList.add("left")):(h.style.width="240pt",h.getBoundingClientRect().width,s.style.marginRight="260pt",a.classList.remove("left"),a.classList.add("right"))})),document.getElementById("redraw").onclick=t.view.update.bind(t.view,Number(e.value),void 0),document.getElementById("reset").onclick=t.view.reset.bind(t.view,Number(e.value))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,